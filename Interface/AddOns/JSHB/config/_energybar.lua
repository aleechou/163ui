--
--	JSHB Options - Power bar panel
--

if not (tContains({ "HUNTER", "WARRIOR", "ROGUE", "WARLOCK" }, select(2, UnitClass("player") ) ) ) then return end

local L = _G.JSHB.L

function JSHB.Options:Panel_EnergyBar(ord)
	local DB = _G.JSHB.Options.DB
	return {
		order = ord,
		type = "group",
		name = L["Focus Bar"],
		childGroups = "tab",
		args = {
			maintab = {
				order = 1,
				type = "group",
				name = L["Focus Bar"],
				args = {
					enabled = {
						type = "toggle",
						order = 2,
						name = L["Enable"],
						width = "double",
						get = function(info) return DB.energybar[info[#info] ] end,
						set = function(info, value) JSHB.Options:CollapseAll(); DB.energybar[info[#info] ] = value;JSHB.Options:LockDown(JSHB.SetupEnergyBarModule) end,
					},
					smoothbar = {
						type = "toggle",
						order = 6,
						name = L["Bar smoothing"],
						disabled = function(info) return not DB.energybar["enabled"] end,
						get = function(info) return DB.energybar[info[#info] ] end,
						set = function(info, value) DB.energybar[info[#info] ] = value;JSHB.Options:LockDown(JSHB.SetupEnergyBarModule) end,
					},
					energynumber = {
						type = "toggle",
						order = 8,
						name = L["Current energy number"],
						desc = L["FOCUSBARNUMBERDESC_ENABLE"],
						width = "double",
						disabled = function(info) return not DB.energybar["enabled"] end,
						get = function(info) return DB.energybar[info[#info] ] end,
						set = function(info, value) DB.energybar[info[#info] ] = value;JSHB.Options:LockDown(JSHB.SetupEnergyBarModule) end,
					},
					enableprediction = {
						type = "toggle",
						order = 9,
						name = L["Focus prediction"],
						disabled = function(info) return not DB.energybar["enabled"] end,
						hidden = function(info) return(select(2, UnitClass("player") ) ~= "HUNTER") end,
						get = function(info) return DB.energybar[info[#info] ] end,
						set = function(info, value) DB.energybar[info[#info] ] = value;JSHB.Options:LockDown(JSHB.SetupEnergyBarModule) end,
					},
					targethealth = {
						type = "toggle",
						order = 10,
						name = L["Target health percentage"],
						width = "full",
						disabled = function(info) return not DB.energybar["enabled"] end,
						get = function(info) return DB.energybar[info[#info] ] end,
						set = function(info, value) DB.energybar[info[#info] ] = value;JSHB.Options:LockDown(JSHB.SetupEnergyBarModule) end,
					},
					shottimer = {
						type = "toggle",
						order = 11,
						name = L["Numeric shot timer"],
						width = "full",
						disabled = function(info) return not DB.energybar["enabled"] end,
						get = function(info) return DB.energybar[info[#info] ] end,
						set = function(info, value) DB.energybar[info[#info] ] = value;JSHB.Options:LockDown(JSHB.SetupEnergyBarModule) end,
					},
					shotbar = {
						type = "toggle",
						order = 12,
						name = L["Autoshot bar"],
						desc = L["FOCUSBARAUTOSHOTBARDESC_ENABLE"],
						disabled = function(info) return not DB.energybar["enabled"] end,
						get = function(info) return DB.energybar[info[#info] ] end,
						set = function(info, value) DB.energybar[info[#info] ] = value;JSHB.Options:LockDown(JSHB.SetupEnergyBarModule) end,
					},
					smoothbarshotbar = {
						type = "toggle",
						order = 14,
						name = L["Bar smoothing"],
						hidden = function(info) return not DB.energybar["shotbar"] end,
						disabled = function(info) return not DB.energybar["enabled"] end,
						get = function(info) return DB.energybar[info[#info] ] end,
						set = function(info, value) DB.energybar[info[#info] ] = value;JSHB.Options:LockDown(JSHB.SetupEnergyBarModule) end,
					},
					shotbarcolor = {
						type = "color",
						order = 15,
						name = L["Shot bar color"],
						desc = L["Color of the bar showing auto shot/attack timer."],
						hasAlpha = true,
						hidden = function(info) return not DB.energybar["shotbar"] end,
						get = function(info) return unpack(DB.energybar[info[#info] ]) end,
						set = function(info, r, g, b, a) DB.energybar[info[#info] ] = {r, g, b, a};JSHB.Options:LockDown(JSHB.SetupEnergyBarModule) end,
					},
					spacer17 = { order = 17, type = "description", name = " ", desc = "", width = "full"},
					width = {
						type = "range", 
						order = 22,
						name = L["Width"],
						min = 6, softMax = 600, max = 1000, step = 1,
						disabled = function(info) return not DB.energybar["enabled"] end,
						get = function(info) return (DB.energybar[info[#info] ]) end,
						set = function(info, size) DB.energybar[info[#info] ] = (size);JSHB.Options:LockDown(JSHB.SetupEnergyBarModule) end,
					},
					spacer24 = { order = 24, type = "description", name = " ", desc = "", width = "half" },
					height = {
						type = "range", 
						order = 26,
						name = L["Height"],
						min = 6, softMax = 600, max = 1000, step = 1,
						disabled = function(info) return not DB.energybar["enabled"] end,
						get = function(info) return (DB.energybar[info[#info] ]) end,
						set = function(info, size) DB.energybar[info[#info] ] = (size);JSHB.Options:LockDown(JSHB.SetupEnergyBarModule) end,
					},
					spacer27 = { order = 27, type = "description", name = " ", desc = "", width = "full" },
					bartexture = {
						type = "select",
						dialogControl = 'LSM30_Statusbar_JS',
						order = 28,
						name = L["Texture"],
						values = AceGUIWidgetLSMlists.statusbar,
						disabled = function(info) return not DB.energybar["enabled"] end,
						get = function(info) return DB.energybar[info[#info] ] end,
						set = function(info, value) DB.energybar[info[#info] ] = value;JSHB.Options:LockDown(JSHB.SetupEnergyBarModule) end,
					},
					spacer29 = { order = 29, type = "description", name = " ", desc = "", width = "full" },
					classcolored = {
						type = "toggle",
						order = 30,
						name = L["Use class colors for the bar"],
						width = "double",
						disabled = function(info) return not DB.energybar["enabled"] end,
						get = function(info) return DB.energybar[info[#info] ] end,
						set = function(info, value) DB.energybar[info[#info] ] = value;JSHB.Options:LockDown(JSHB.SetupEnergyBarModule) end,
					},
					spacer32 = { order = 32, type = "description", name = " ", desc = "", hidden = function(info) return (not DB.energybar.classcolored) end },
					barcolor = {
						type = "color",
						order = 34,
						name = L["Normal color"],
						desc = L["ENERGYBARCOLORNORM_DESC"],
						hasAlpha = true,
						hidden = function(info) return DB.energybar.classcolored end,
						get = function(info) return unpack(DB.energybar[info[#info] ]) end,
						set = function(info, r, g, b, a) DB.energybar[info[#info] ] = {r, g, b, a};JSHB.Options:LockDown(JSHB.SetupEnergyBarModule) end,
					},
					lowwarn = {
						type = "toggle",
						order = 36,
						name = L["Low focus change"],
						desc = L["FOCUSBARLOWWARNDESC_ENABLE"],
						width = "double",
						disabled = function(info) return not DB.energybar["enabled"] end,
						get = function(info) return DB.energybar[info[#info] ] end,
						set = function(info, value) DB.energybar[info[#info] ] = value;JSHB.Options:LockDown(JSHB.SetupEnergyBarModule) end,
					},
					spacer38 = { order = 38, type = "description", name = " ", desc = "", width = "half", hidden = function(info) return(DB.energybar.lowwarn) end },
					barcolorlow = {
						type = "color",
						order = 40,
						name = L["Low color"],
						desc = L["ENERGYBARCOLORNORM_DESC"],
						hasAlpha = true,
						hidden = function(info) return not DB.energybar.lowwarn end,
						disabled = function(info) return not DB.energybar["enabled"] end,
						get = function(info) return unpack(DB.energybar[info[#info] ]) end,
						set = function(info, r, g, b, a) DB.energybar[info[#info] ] = {r, g, b, a};JSHB.Options:LockDown(JSHB.SetupEnergyBarModule) end,
					},
					highwarn = {
						type = "toggle",
						order = 42,
						name = L["High focus change"],
						desc = L["FOCUSBARHIGHWARNDESC_ENABLE"],
						disabled = function(info) return not DB.energybar["enabled"] end,
						get = function(info) return DB.energybar[info[#info] ] end,
						set = function(info, value) DB.energybar[info[#info] ] = value;JSHB.Options:LockDown(JSHB.SetupEnergyBarModule) end,
					},
					highwarnthreshold = {
						type = "range", 
						order = 44,
						name = L["High warning %"],
						desc = L["FOCUSBARHIGHWARNTHRESHOLD_DESC"],
						disabled = function(info) return not DB.energybar["enabled"] end,
						hidden = function(info) return(not DB.energybar.highwarn) end,
						isPercent = true,
						min = .1, max = 1, step = .05,
						get = function(info) return(DB.energybar[info[#info] ]) end,
						set = function(info, size) DB.energybar[info[#info] ] = (size);JSHB.Options:LockDown(JSHB.SetupEnergyBarModule) end,
					},
					barcolorhigh = {
						type = "color",
						order = 46,
						name = L["High color"],
						desc = L["ENERGYBARCOLORNORM_DESC"],
						hasAlpha = true,
						hidden = function(info) return not DB.energybar.highwarn end,
						disabled = function(info) return not DB.energybar["enabled"] end,
						get = function(info) return unpack(DB.energybar[info[#info] ]) end,
						set = function(info, r, g, b, a) DB.energybar[info[#info] ] = {r, g, b, a};JSHB.Options:LockDown(JSHB.SetupEnergyBarModule) end,
					},
				},
			},
			alphastuff = {
				order = 6,
				type = "group",
				name = L["Bar alpha"],
				disabled = function(info) return not DB.energybar["enabled"] end,
				args = {
					activealpha = {
						type = "range",
						order = 24,
						name = L["Active alpha"],
						desc = L["FOCUSBARACTIVEALPHA_DESC"],
						min = 0, max = 1, step = .1,
						isPercent = true,
						disabled = function(info) return not DB.energybar["enabled"] end,
						get = function(info) return (DB.energybar[info[#info] ]) end,
						set = function(info, value) DB.energybar[info[#info] ] = (value);JSHB.Options:LockDown(JSHB.SetupEnergyBarModule) end,
					},
					inactivealpha = {
						type = "range",
						order = 26,
						name = L["Inactive alpha"],
						desc = L["FOCUSBARINACTIVEALPHA_DESC"],
						min = 0, max = 1, step = .1,
						isPercent = true,
						disabled = function(info) return not DB.energybar["enabled"] end,
						get = function(info) return (DB.energybar[info[#info] ]) end,
						set = function(info, value) DB.energybar[info[#info] ] = (value);JSHB.Options:LockDown(JSHB.SetupEnergyBarModule) end,
					},
					spacer27 = { order = 27, type = "description", name = " ", desc = "", width = "full"},
					oocoverride = {
						type = "toggle",
						order = 28,
						name = L["OOC override"],
						disabled = function(info) return not DB.energybar["enabled"] end,
						get = function(info) return DB.energybar[info[#info] ] end,
						set = function(info, value) DB.energybar[info[#info] ] = value;JSHB.Options:LockDown(JSHB.SetupEnergyBarModule) end,
					},
					mountoverride = {
						type = "toggle",
						order = 32,
						name = L["Mounted override"],
						disabled = function(info) return not DB.energybar["enabled"] end,
						get = function(info) return DB.energybar[info[#info] ] end,
						set = function(info, value) DB.energybar[info[#info] ] = value;JSHB.Options:LockDown(JSHB.SetupEnergyBarModule) end,
					},
					deadoverride = {
						type = "toggle",
						order = 34,
						name = L["Dead override"],
						disabled = function(info) return not DB.energybar["enabled"] end,
						get = function(info) return DB.energybar[info[#info] ] end,
						set = function(info, value) DB.energybar[info[#info] ] = value;JSHB.Options:LockDown(JSHB.SetupEnergyBarModule) end,
					},
					spacer36 = { order = 36, type = "description", name = " ", desc = "", width = "full"},
					oocoverridealpha = {
						type = "range",
						order = 38,
						name = L["OOC alpha"],
						min = 0, max = 1, step = .1,
						isPercent = true,
						disabled = function(info) 
							if not DB.energybar["oocoverride"] then return true end
							if not DB.energybar["enabled"] then return true end
							return false end,
						get = function(info) return (DB.energybar[info[#info] ]) end,
						set = function(info, value) DB.energybar[info[#info] ] = (value);JSHB.Options:LockDown(JSHB.SetupEnergyBarModule) end,
					},
					mountoverridealpha = {
						type = "range",
						order = 40,
						name = L["Mounted alpha"],
						min = 0, max = 1, step = .1,
						isPercent = true,
						disabled = function(info) 
							if not DB.energybar["mountoverride"] then return true end
							if not DB.energybar["enabled"] then return true end
							return false end,
						get = function(info) return (DB.energybar[info[#info] ]) end,
						set = function(info, value) DB.energybar[info[#info] ] = (value);JSHB.Options:LockDown(JSHB.SetupEnergyBarModule) end,
					},
					deadoverridealpha = {
						type = "range",
						order = 42,
						name = L["Dead alpha"],
						desc = L["FOCUSBARDEADALPHA_DESC"],
						min = 0, max = 1, step = .1,
						isPercent = true,
						disabled = function(info) 
							if not DB.energybar["deadoverride"] then return true end
							if not DB.energybar["enabled"] then return true end
							return false end,
						get = function(info) return (DB.energybar[info[#info] ]) end,
						set = function(info, value) DB.energybar[info[#info] ] = (value);JSHB.Options:LockDown(JSHB.SetupEnergyBarModule) end,
					},
				},
			},
			stackstuff = {
				order = 10,
				type = "group",
				name = L["Stacks"],
				args = {
					enablestacks = {
						type = "toggle",
						order = 4,
						name = L["Enable"],
						get = function(info) return DB.energybar.enablestacks end,
						set = function(info, value) DB.energybar.enablestacks = value;JSHB.Options:LockDown(JSHB.SetupEnergyBarModule) end,
					},
					stacksretro = {
						type = "toggle",
						order = 6,
						name = L["Retro style"],
						desc = L["RETROSTYLEDESC"],
						disabled = function(info) return ( (not DB.energybar["enablestacks"]) or (not DB.energybar["enabled"]) ) end,
						get = function(info) return DB.energybar[info[#info] ] end,
						set = function(info, value) DB.energybar[info[#info] ] = value;JSHB.Options:LockDown(JSHB.SetupEnergyBarModule) end,
					},
					embedstacks = {
						type = "toggle",
						order = 8,
						name = L["Embed on bar"],
						desc = L["FOCUSBARSTACKSEMBEDDESC_ENABLE"],
						disabled = function(info) return (not DB.energybar["enablestacks"]) end,
						hidden = function(info) return (DB.energybar.stacksretro) end,
						get = function(info) return DB.energybar[info[#info] ] end,
						set = function(info, value) DB.energybar[info[#info] ] = value;JSHB.Options:LockDown(JSHB.SetupEnergyBarModule) end,
					},
					stacksretroontop = {
						type = "toggle",
						order = 10,
						name = L["Stacks on top"],
						desc = L["STACKSONTOPDESC_ENABLE"],
						disabled = function(info) return (not DB.energybar["enablestacks"]) end,
						hidden = function(info) return (not DB.energybar.stacksretro) end,
						get = function(info) return DB.energybar[info[#info] ] end,
						set = function(info, value) DB.energybar[info[#info] ] = value;JSHB.Options:LockDown(JSHB.SetupEnergyBarModule) end,
					},
					stacksreverse = {
						type = "toggle",
						order = 14,
						name = L["Reverse stacks"],
						desc = L["FOCUSBARSTACKSREVERSEDESC_ENABLE"],
						disabled = function(info) return ( (not DB.energybar["enablestacks"]) or ( (DB.energybar["embedstacks"]) and (not DB.energybar["enabled"]) ) ) end,
						hidden = function(info) return (DB.energybar.stacksretro) end,
						get = function(info) return DB.energybar[info[#info] ] end,
						set = function(info, value) DB.energybar[info[#info] ] = value;JSHB.Options:LockDown(JSHB.SetupEnergyBarModule) end,
					},
					stackscolor = {
						type = "color",
						order = 18,
						name = L["Stacks color"],
						hasAlpha = false,
						disabled = function(info) return ( (not DB.energybar["enablestacks"]) or ( (DB.energybar["embedstacks"]) and (not DB.energybar["enabled"]) ) ) end,
						hidden = function(info) return (DB.energybar.stacksretro) end,
						get = function(info) return unpack(DB.energybar[info[#info] ]) end,
						set = function(info, r, g, b, a) DB.energybar[info[#info] ] = {r, g, b, a};JSHB.Options:LockDown(JSHB.SetupEnergyBarModule) end,
					},
					stackssize = {
						type = "range",
						order = 22,
						name = L["Stack size"],
						desc = L["FOCUSBARSTACKSIZE_DESC"],
						min = 10, softMax = 100, max = 600, step = 1,
						disabled = function(info) return (DB.energybar["embedstacks"] or (not DB.energybar["enablestacks"]) ) end,
						hidden = function(info) return (DB.energybar.stacksretro) end,
						get = function(info) return (DB.energybar[info[#info] ]) end,
						set = function(info, value) DB.energybar[info[#info] ] = (value);JSHB.Options:LockDown(JSHB.SetupEnergyBarModule) end,
					},
					stackscolorretro = {
						type = "color",
						order = 26,
						name = L["Color"],
						hasAlpha = false,
						disabled = function(info) return ( (not DB.energybar["enablestacks"]) or ( (DB.energybar["embedstacks"]) and (not DB.energybar["enabled"]) ) ) end,
						hidden = function(info) return (not DB.energybar.stacksretro) end,
						get = function(info) return unpack(DB.energybar[info[#info] ]) end,
						set = function(info, r, g, b, a) DB.energybar[info[#info] ] = {r, g, b, a};JSHB.Options:LockDown(JSHB.SetupEnergyBarModule) end,
					},
					stackscolorretro_ba = {
						type = "color",
						order = 28,
						name = L["Background color"],
						hasAlpha = false,
						disabled = function(info) return ( (not DB.energybar["enablestacks"]) or ( (DB.energybar["embedstacks"]) and (not DB.energybar["enabled"]) ) ) end,
						hidden = function(info) return (not DB.energybar.stacksretro) end,
						get = function(info) return unpack(DB.energybar[info[#info] ]) end,
						set = function(info, r, g, b, a) DB.energybar[info[#info] ] = {r, g, b, a};JSHB.Options:LockDown(JSHB.SetupEnergyBarModule) end,
					},
					stackscolorretro_bo = {
						type = "color",
						order = 32,
						name = L["Border color"],
						hasAlpha = false,
						disabled = function(info) return ( (not DB.energybar["enablestacks"]) or ( (DB.energybar["embedstacks"]) and (not DB.energybar["enabled"]) ) ) end,
						hidden = function(info) return (not DB.energybar.stacksretro) end,
						get = function(info) return unpack(DB.energybar[info[#info] ]) end,
						set = function(info, r, g, b, a) DB.energybar[info[#info] ] = {r, g, b, a};JSHB.Options:LockDown(JSHB.SetupEnergyBarModule) end,
					},
				},
			},
			ticks = {
				order = 14,
				type = "group",
				name = L["Tick marks"],
				disabled = function(info) return not DB.energybar["enabled"] end,
				args = {
					tickstuff1 = {
						order = 24,
						type = "group",
						name = L["Tick Mark 1 (Main Spell)"],
						disabled = function(info) return not DB.energybar["enabled"] end,
						guiInline = true,
						args = {
							enabled = {
								type = "toggle",
								order = 4,
								name = L["Enable"],
								desc = L["FOCUSBARTICKDESC_ENABLE"],
								width = "full",
								get = function(info) return DB.energybar.ticks[1][1] end,
								set = function(info, value) DB.energybar.ticks[1][1] = value;JSHB.Options:LockDown(JSHB.SetupEnergyBarModule) end,
							},							
							colorbar = {
								type = "toggle",
								order = 14,
								name = L["Change bar color"],
								desc = L["TICKCOLOR_DESC"],
								hidden = function(info) return not DB.energybar.ticks[1][1] end,
								get = function(info) return DB.energybar.ticks[1][4] end,
								set = function(info, value) DB.energybar.ticks[1][4] = value;JSHB.Options:LockDown(JSHB.SetupEnergyBarModule) end,
							},
							color = {
								type = "color",
								order = 18,
								name = L["Color"],
								desc = L["Color to change to."],
								disabled = function(info) return not DB.energybar.ticks[1][4] end,
								hidden = function(info) return not DB.energybar.ticks[1][1] end,
								hasAlpha = true,
								get = function(info) return unpack(DB.energybar.ticks[1][5]) end,
								set = function(info, r, g, b, a) DB.energybar.ticks[1][5] = {r, g, b, a};JSHB.Options:LockDown(JSHB.SetupEnergyBarModule) end,
							},
						},
					},
					tickstuff2 = {
						order = 26,
						type = "group",
						name = L["Tick Mark 2"],
						hidden = function(info) return not DB.energybar.ticks[1][1] end,
						disabled = function(info) return not DB.energybar["enabled"] end,
						guiInline = true,
						args = {
							enabled = {
								type = "toggle",
								order = 4,
								name = L["Enable"],
								desc = L["FOCUSBARTICKDESC_ENABLE"],
								width = "full",
								get = function(info) return DB.energybar.ticks[2][1] end,
								set = function(info, value) DB.energybar.ticks[2][1] = value;JSHB.Options:LockDown(JSHB.SetupEnergyBarModule) end,
							},
							spell = {
								order = 7,
								type = "select",
								name = L["Spell"],
								desc = L["TICKSPELL_DESC"],
								hidden = function(info) return not DB.energybar.ticks[2][1] end,
								style = "dropdown",
								values = function() return JSHB.Options:GetPlayerFocusSpells() end,
								get = function(info) return DB.energybar.ticks[2][2] end,
								set = function(info, value) DB.energybar.ticks[2][2] = value;JSHB.Options:LockDown(JSHB.SetupEnergyBarModule) end,
							},
							spec = {
								order = 8,
								type = "select",
								name = L["Talent spec"],
								desc = L["TICKSPEC_DESC"],
								hidden = function(info) return not DB.energybar.ticks[2][1] end,
								style = "dropdown",
								values = function()
										local t = {
											["0"] = L["Any Spec"],
											["1"] = select(2, GetSpecializationInfo(1) ),
											["2"] = select(2, GetSpecializationInfo(2) ),
											["3"] = select(2, GetSpecializationInfo(3) ),
										}
										return(t)
									end,
								get = function(info) return(tostring(DB.energybar.ticks[2][6]) ) end,
								set = function(info, value) DB.energybar.ticks[2][6] = tonumber(value);JSHB.Options:LockDown(JSHB.SetupEnergyBarModule) end,
							},
							offset = {
								type = "toggle",
								order = 10,
								name = L["Offset from main spell"],
								desc = L["TICKOFFSET_DESC"],
								hidden = function(info) return not DB.energybar.ticks[2][1] end,
								get = function(info) return DB.energybar.ticks[2][3] end,
								set = function(info, value) DB.energybar.ticks[2][3] = value;JSHB.Options:LockDown(JSHB.SetupEnergyBarModule) end,
							},
							colorbar = {
								type = "toggle",
								order = 14,
								name = L["Change bar color"],
								desc = L["TICKCOLOR_DESC"],
								hidden = function(info) return not DB.energybar.ticks[2][1] end,
								get = function(info) return DB.energybar.ticks[2][4] end,
								set = function(info, value) DB.energybar.ticks[2][4] = value;JSHB.Options:LockDown(JSHB.SetupEnergyBarModule) end,
							},
							color = {
								type = "color",
								order = 18,
								name = L["Color"],
								desc = L["Color to change to."],
								disabled = function(info) return not DB.energybar.ticks[2][4] end,
								hidden = function(info) return not DB.energybar.ticks[2][1] end,
								hasAlpha = true,
								get = function(info) return unpack(DB.energybar.ticks[2][5]) end,
								set = function(info, r, g, b, a) DB.energybar.ticks[2][5] = {r, g, b, a};JSHB.Options:LockDown(JSHB.SetupEnergyBarModule) end,
							},
						},
					},
					tickstuff3 = {
						order = 29,
						type = "group",
						name = L["Tick Mark 3"],
						hidden = function(info) return not DB.energybar.ticks[1][1] end,
						disabled = function(info) return not DB.energybar["enabled"] end,
						guiInline = true,
						args = {
							enabled = {
								type = "toggle",
								order = 4,
								name = L["Enable"],
								desc = L["FOCUSBARTICKDESC_ENABLE"],
								width = "full",
								get = function(info) return DB.energybar.ticks[3][1] end,
								set = function(info, value) DB.energybar.ticks[3][1] = value;JSHB.Options:LockDown(JSHB.SetupEnergyBarModule) end,
							},
							spell = {
								order = 7,
								type = "select",
								name = L["Spell"],
								desc = L["TICKSPELL_DESC"],
								hidden = function(info) return not DB.energybar.ticks[3][1] end,
								style = "dropdown",
								values = function() return JSHB.Options:GetPlayerFocusSpells() end,
								get = function(info) return DB.energybar.ticks[3][2] end,
								set = function(info, value) DB.energybar.ticks[3][2] = value;JSHB.Options:LockDown(JSHB.SetupEnergyBarModule) end,
							},
							spec = {
								order = 8,
								type = "select",
								name = L["Talent spec"],
								desc = L["TICKSPEC_DESC"],
								hidden = function(info) return not DB.energybar.ticks[3][1] end,
								style = "dropdown",
								values = function()
										local t = {
											["0"] = L["Any Spec"],
											["1"] = select(2, GetSpecializationInfo(1) ),
											["2"] = select(2, GetSpecializationInfo(2) ),
											["3"] = select(2, GetSpecializationInfo(3) ),
										}
										return(t)
									end,
								get = function(info) return(tostring(DB.energybar.ticks[3][6]) ) end,
								set = function(info, value) DB.energybar.ticks[3][6] = tonumber(value);JSHB.Options:LockDown(JSHB.SetupEnergyBarModule) end,
							},
							offset = {
								type = "toggle",
								order = 10,
								name = L["Offset from main spell"],
								desc = L["TICKOFFSET_DESC"],
								hidden = function(info) return not DB.energybar.ticks[3][1] end,
								get = function(info) return DB.energybar.ticks[3][3] end,
								set = function(info, value) DB.energybar.ticks[3][3] = value;JSHB.Options:LockDown(JSHB.SetupEnergyBarModule) end,
							},
							colorbar = {
								type = "toggle",
								order = 14,
								name = L["Change bar color"],
								desc = L["TICKCOLOR_DESC"],
								hidden = function(info) return not DB.energybar.ticks[3][1] end,
								get = function(info) return DB.energybar.ticks[3][4] end,
								set = function(info, value) DB.energybar.ticks[3][4] = value;JSHB.Options:LockDown(JSHB.SetupEnergyBarModule) end,
							},
							color = {
								type = "color",
								order = 18,
								name = L["Color"],
								desc = L["Color to change to."],
								disabled = function(info) return not DB.energybar.ticks[3][4] end,
								hidden = function(info) return not DB.energybar.ticks[3][1] end,
								hasAlpha = true,
								get = function(info) return unpack(DB.energybar.ticks[3][5]) end,
								set = function(info, r, g, b, a) DB.energybar.ticks[3][5] = {r, g, b, a};JSHB.Options:LockDown(JSHB.SetupEnergyBarModule) end,
							},
						},
					},
					tickstuff4 = {
						order = 32,
						type = "group",
						name = L["Tick Mark 4"],
						hidden = function(info) return not DB.energybar.ticks[1][1] end,
						disabled = function(info) return not DB.energybar["enabled"] end,
						guiInline = true,
						args = {
							enabled = {
								type = "toggle",
								order = 4,
								name = L["Enable"],
								desc = L["FOCUSBARTICKDESC_ENABLE"],
								width = "full",
								get = function(info) return DB.energybar.ticks[4][1] end,
								set = function(info, value) DB.energybar.ticks[4][1] = value;JSHB.Options:LockDown(JSHB.SetupEnergyBarModule) end,
							},
							spell = {
								order = 7,
								type = "select",
								name = L["Spell"],
								desc = L["TICKSPELL_DESC"],
								hidden = function(info) return not DB.energybar.ticks[4][1] end,
								style = "dropdown",
								values = function() return JSHB.Options:GetPlayerFocusSpells() end,
								get = function(info) return DB.energybar.ticks[4][2] end,
								set = function(info, value) DB.energybar.ticks[4][2] = value;JSHB.Options:LockDown(JSHB.SetupEnergyBarModule) end,
							},
							spec = {
								order = 8,
								type = "select",
								name = L["Talent spec"],
								desc = L["TICKSPEC_DESC"],
								hidden = function(info) return not DB.energybar.ticks[4][1] end,
								style = "dropdown",
								values = function()
										local t = {
											["0"] = L["Any Spec"],
											["1"] = select(2, GetSpecializationInfo(1) ),
											["2"] = select(2, GetSpecializationInfo(2) ),
											["3"] = select(2, GetSpecializationInfo(3) ),
										}
										return(t)
									end,
								get = function(info) return(tostring(DB.energybar.ticks[4][6]) ) end,
								set = function(info, value) DB.energybar.ticks[4][6] = tonumber(value);JSHB.Options:LockDown(JSHB.SetupEnergyBarModule) end,
							},
							offset = {
								type = "toggle",
								order = 10,
								name = L["Offset from main spell"],
								desc = L["TICKOFFSET_DESC"],
								hidden = function(info) return not DB.energybar.ticks[4][1] end,
								get = function(info) return DB.energybar.ticks[4][3] end,
								set = function(info, value) DB.energybar.ticks[4][3] = value;JSHB.Options:LockDown(JSHB.SetupEnergyBarModule) end,
							},
							colorbar = {
								type = "toggle",
								order = 14,
								name = L["Change bar color"],
								desc = L["TICKCOLOR_DESC"],
								hidden = function(info) return not DB.energybar.ticks[4][1] end,
								get = function(info) return DB.energybar.ticks[4][4] end,
								set = function(info, value) DB.energybar.ticks[4][4] = value;JSHB.Options:LockDown(JSHB.SetupEnergyBarModule) end,
							},
							color = {
								type = "color",
								order = 18,
								name = L["Color"],
								desc = L["Color to change to."],
								disabled = function(info) return not DB.energybar.ticks[4][4] end,
								hidden = function(info) return not DB.energybar.ticks[4][1] end,
								hasAlpha = true,
								get = function(info) return unpack(DB.energybar.ticks[4][5]) end,
								set = function(info, r, g, b, a) DB.energybar.ticks[4][5] = {r, g, b, a};JSHB.Options:LockDown(JSHB.SetupEnergyBarModule) end,
							},
						},
					},
					tickstuff5 = {
						order = 35,
						type = "group",
						name = L["Tick Mark 5"],
						hidden = function(info) return not DB.energybar.ticks[1][1] end,
						disabled = function(info) return not DB.energybar["enabled"] end,
						guiInline = true,
						args = {
							enabled = {
								type = "toggle",
								order = 4,
								name = L["Enable"],
								desc = L["FOCUSBARTICKDESC_ENABLE"],
								width = "full",
								get = function(info) return DB.energybar.ticks[5][1] end,
								set = function(info, value) DB.energybar.ticks[5][1] = value;JSHB.Options:LockDown(JSHB.SetupEnergyBarModule) end,
							},
							spell = {
								order = 7,
								type = "select",
								name = L["Spell"],
								desc = L["TICKSPELL_DESC"],
								hidden = function(info) return not DB.energybar.ticks[5][1] end,
								style = "dropdown",
								values = function() return JSHB.Options:GetPlayerFocusSpells() end,
								get = function(info) return DB.energybar.ticks[5][2] end,
								set = function(info, value) DB.energybar.ticks[5][2] = value;JSHB.Options:LockDown(JSHB.SetupEnergyBarModule) end,
							},
							spec = {
								order = 8,
								type = "select",
								name = L["Talent spec"],
								desc = L["TICKSPEC_DESC"],
								hidden = function(info) return not DB.energybar.ticks[5][1] end,
								style = "dropdown",
								values = function()
										local t = {
											["0"] = L["Any Spec"],
											["1"] = select(2, GetSpecializationInfo(1) ),
											["2"] = select(2, GetSpecializationInfo(2) ),
											["3"] = select(2, GetSpecializationInfo(3) ),
										}
										return(t)
									end,
								get = function(info) return(tostring(DB.energybar.ticks[5][6]) ) end,
								set = function(info, value) DB.energybar.ticks[5][6] = tonumber(value);JSHB.Options:LockDown(JSHB.SetupEnergyBarModule) end,
							},
							offset = {
								type = "toggle",
								order = 10,
								name = L["Offset from main spell"],
								desc = L["TICKOFFSET_DESC"],
								hidden = function(info) return not DB.energybar.ticks[5][1] end,
								get = function(info) return DB.energybar.ticks[5][3] end,
								set = function(info, value) DB.energybar.ticks[5][3] = value;JSHB.Options:LockDown(JSHB.SetupEnergyBarModule) end,
							},
							colorbar = {
								type = "toggle",
								order = 14,
								name = L["Change bar color"],
								desc = L["TICKCOLOR_DESC"],
								hidden = function(info) return not DB.energybar.ticks[5][1] end,
								get = function(info) return DB.energybar.ticks[5][4] end,
								set = function(info, value) DB.energybar.ticks[5][4] = value;JSHB.Options:LockDown(JSHB.SetupEnergyBarModule) end,
							},
							color = {
								type = "color",
								order = 18,
								name = L["Color"],
								desc = L["Color to change to."],
								disabled = function(info) return not DB.energybar.ticks[5][4] end,
								hidden = function(info) return not DB.energybar.ticks[5][1] end,
								hasAlpha = true,
								get = function(info) return unpack(DB.energybar.ticks[5][5]) end,
								set = function(info, r, g, b, a) DB.energybar.ticks[5][5] = {r, g, b, a};JSHB.Options:LockDown(JSHB.SetupEnergyBarModule) end,
							},
						},
					},
				},
			},
			fonts = {
				type = "group",
				order = 18,
				name = L["Fonts"],
				disabled = function(info) return not DB.energybar["enabled"] end,
				args = {
					energyfont = {
						type = "group",
						order = 26,
						name = L["Energy font"],
						guiInline = true,
						args = {
							energyfontcolor = {
								type = "color",
								order = 2,
								name = L["Color"],
								desc = L["Color of the text showing your current energy."],
								hasAlpha = true,
								get = function(info) return unpack(DB.energybar[info[#info] ]) end,
								set = function(info, r, g, b, a) DB.energybar[info[#info] ] = {r, g, b, a};JSHB.Options:LockDown(JSHB.SetupEnergyBarModule) end,
							},
							energyfontoffset = {
								type = "range", 
								order = 4,
								name = L["Energy offset"],
								desc = L["DESC_ENERGYBARFONTOFFSET"],
								min = -900, softMin = -100, softMax = 100, max = 900, step = 1,
								get = function(info) return (DB.energybar[info[#info] ]) end,
								set = function(info, size) DB.energybar[info[#info] ] = (size);JSHB.Options:LockDown(JSHB.SetupEnergyBarModule) end,
							},
							spacer5 = { order = 5, type = "description", name = " ", desc = "", width = "half" },
							font = {
								type = "select", 
								dialogControl = "LSM30_Font_JS",
								order = 6,
								name = L["Font face"],
								values = AceGUIWidgetLSMlists.font,
								get = function(info) return DB.energybar[info[#info-1] ][1] end,
								set = function(info, font) DB.energybar[info[#info-1] ][1] = font;JSHB.Options:LockDown(JSHB.SetupEnergyBarModule) end,
							},
							size = {
								type = "range", 
								order = 8,
								name = L["Font size"],
								min = 6, max = 40, step = 1,
								get = function(info) return (DB.energybar[info[#info-1] ][2]) end,
								set = function(info, size) DB.energybar[info[#info-1] ][2] = (size);JSHB.Options:LockDown(JSHB.SetupEnergyBarModule) end,
							},
							flags = {
								type = "multiselect", 
								order = 12,
								name = L["Font flags"],
								values = JSHB.Options.fontFlagTable,
								get = function(info, key) return(tContains({strsplit(",", DB.energybar[info[#info-1] ][3])}, key) and true or false) end,
								set = function(info, keyname, state) JSHB.Options:SetupFontFlags(DB.energybar[info[#info-1] ], keyname, state);JSHB.Options:LockDown(JSHB.SetupEnergyBarModule) end,
							},
						},
					},
					healthfont = {
						type = "group",
						order = 32,
						name = L["Target's health font"],
						guiInline = true,
						args = {
							healthfontoffset = {
								type = "range", 
								order = 2,
								name = L["Health offset"],
								desc = L["DESC_ENERGYBARFONTOFFSET"],
								min = -900, softMin = -100, softMax = 100, max = 900, step = 1,
								get = function(info) return (DB.energybar[info[#info] ]) end,
								set = function(info, size) DB.energybar[info[#info] ] = (size);JSHB.Options:LockDown(JSHB.SetupEnergyBarModule) end,
							},
							font = {
								type = "select", 
								dialogControl = 'LSM30_Font_JS',
								order = 6,
								name = L["Font face"],
								values = AceGUIWidgetLSMlists.font,
								get = function(info) return DB.energybar[info[#info-1] ][1] end,
								set = function(info, font) DB.energybar[info[#info-1] ][1] = font;JSHB.Options:LockDown(JSHB.SetupEnergyBarModule) end,
							},
							size = {
								type = "range", 
								order = 8,
								name = L["Font size"],
								min = 6, max = 40, step = 1,
								get = function(info) return (DB.energybar[info[#info-1] ][2]) end,
								set = function(info, size) DB.energybar[info[#info-1] ][2] = (size);JSHB.Options:LockDown(JSHB.SetupEnergyBarModule) end,
							},
							flags = {
								type = "multiselect", 
								order = 10,
								name = L["Font flags"],
								values = JSHB.Options.fontFlagTable,
								get = function(info, key) return(tContains({strsplit(",", DB.energybar[info[#info-1] ][3])}, key) and true or false) end,
								set = function(info, keyname, state) JSHB.Options:SetupFontFlags(DB.energybar[info[#info-1] ], keyname, state);JSHB.Options:LockDown(JSHB.SetupEnergyBarModule) end,
							},
						},
					},
					shottimerfont = {
						type = "group",
						order = 36,
						name = L["Shot timer font"],
						guiInline = true,
						args = {
							shottimerfontcolor = {
								type = "color",
								order = 2,
								name = L["Shot timer text color"],
								desc = L["Color of the text showing autoshot timer."],
								hasAlpha = true,
								get = function(info) return unpack(DB.energybar[info[#info] ]) end,
								set = function(info, r, g, b, a) DB.energybar[info[#info] ] = {r, g, b, a};JSHB.Options:LockDown(JSHB.SetupEnergyBarModule) end,
							},
							shottimerfontoffset = {
								type = "range", 
								order = 4,
								name = L["Shot timer offset"],
								desc = L["DESC_ENERGYBARFONTOFFSET"],
								min = -900, softMin = -100, softMax = 100, max = 900, step = 1,
								get = function(info) return (DB.energybar[info[#info] ]) end,
								set = function(info, size) DB.energybar[info[#info] ] = (size);JSHB.Options:LockDown(JSHB.SetupEnergyBarModule) end,
							},
							spacer8 = { order = 8, type = "description", name = " ", desc = "", width = "half" },
							font = {
								type = "select", 
								dialogControl = 'LSM30_Font_JS',
								order = 10,
								name = L["Font face"],
								values = AceGUIWidgetLSMlists.font,
								get = function(info) return DB.energybar[info[#info-1] ][1] end,
								set = function(info, font) DB.energybar[info[#info-1] ][1] = font;JSHB.Options:LockDown(JSHB.SetupEnergyBarModule) end,
							},
							size = {
								type = "range", 
								order = 12,
								name = L["Font size"],
								min = 6, max = 40, step = 1,
								get = function(info) return (DB.energybar[info[#info-1] ][2]) end,
								set = function(info, size) DB.energybar[info[#info-1] ][2] = (size);JSHB.Options:LockDown(JSHB.SetupEnergyBarModule) end,
							},
							flags = {
								type = "multiselect", 
								order = 14,
								name = L["Font flags"],
								values = JSHB.Options.fontFlagTable,
								get = function(info, key) return(tContains({strsplit(",", DB.energybar[info[#info-1] ][3])}, key) and true or false) end,
								set = function(info, keyname, state) JSHB.Options:SetupFontFlags(DB.energybar[info[#info-1] ], keyname, state);JSHB.Options:LockDown(JSHB.SetupEnergyBarModule) end,
							},
						},
					},
				},
			},
			backdrop = {
				type = "group",
				order = 22,
				name = L["Backdrop"],
				disabled = function(info) return not DB.energybar["enabled"] end,
				args = {
					enablebackdrop = {
						type = "toggle",
						order = 1,
						name = L["Enable"],
						width = "double",
						get = function(info) return DB.energybar[info[#info] ] end,
						set = function(info, value) DB.energybar[info[#info] ] = value;JSHB.Options:LockDown(JSHB.SetupEnergyBarModule) end,
					},
					backdroptexture = {
						type = "select",
						dialogControl = 'LSM30_Background_JS',
						order = 2,
						name = L["Backdrop texture"],
						values = AceGUIWidgetLSMlists.background,
						disabled = function(info) return not DB.energybar["enablebackdrop"] end,
						get = function(info) return DB.energybar[info[#info] ] end,
						set = function(info, value) DB.energybar[info[#info] ] = value;JSHB.Options:LockDown(JSHB.SetupEnergyBarModule) end,
					},
					colorbackdrop = {
						type = "toggle",
						order = 3,
						name = L["Color the backdrop"],
						disabled = function(info) return not DB.energybar["enablebackdrop"] end,
						get = function(info) return DB.energybar[info[#info] ] end,
						set = function(info, value) DB.energybar[info[#info] ] = value;JSHB.Options:LockDown(JSHB.SetupEnergyBarModule) end,
					},
					backdropcolor = {
						type = "color",
						order = 5,
						name = L["Backdrop color"],
						hasAlpha = true,
						disabled = function(info) return not DB.energybar["enablebackdrop"] end,
						hidden = function(info) return not DB.energybar.colorbackdrop end,
						get = function(info) return unpack(DB.energybar[info[#info] ]) end,
						set = function(info, r, g, b, a) DB.energybar[info[#info] ] = {r, g, b, a};JSHB.Options:LockDown(JSHB.SetupEnergyBarModule) end,
					},
					spacer6 = { order = 6, type = "description", name = " ", desc = "", width = "half", hidden = function(info) return not DB.energybar.colorbackdrop end },
					tile = {
						type = "toggle",
						order = 7,
						name = L["Tile the backdrop"],
						disabled = function(info) return not DB.energybar["enablebackdrop"] end,
						get = function(info) return DB.energybar[info[#info] ] end,
						set = function(info, value) DB.energybar[info[#info] ] = value;JSHB.Options:LockDown(JSHB.SetupEnergyBarModule) end,
					},
					tilesize = {
						type = "range",
						order = 8,
						name = L["Tile size"],
						min = -100, softMin = -30, softMax = 30, max = 100, step = 1,
						disabled = function(info) return not DB.energybar["enablebackdrop"] end,
						hidden = function(info) return not DB.energybar.tile end,
						get = function(info) return DB.energybar[info[#info] ] end,
						set = function(info, value) DB.energybar[info[#info] ] = value;JSHB.Options:LockDown(JSHB.SetupEnergyBarModule) end,
					},
					spacer = { order = 11, type = "description", name = "", desc = "", width = "full"},
					backdropoffsets = {
						type = "group",
						order = 14,
						name = L["Offsets"],
						guiInline = true,
						args = {
							offsetX1 = {
								type = "range",
								order = 1,
								name = L["Top-left X"],
								min = -50, softMin = -10, softMax = 0, max = 50, step = 1,
								disabled = function(info) return not DB.energybar["enablebackdrop"] end,
								get = function(info) return (DB.energybar[info[#info-1] ][1]) end,
								set = function(info, offset) DB.energybar[info[#info-1] ][1] = (offset);JSHB.Options:LockDown(JSHB.SetupEnergyBarModule) end,
							},
							offsetY1 = {
								type = "range", 
								order = 2,
								name = L["Top-left Y"],
								min = -50, softMin = 0, softMax = 10, max = 50, step = 1,
								disabled = function(info) return not DB.energybar["enablebackdrop"] end,
								get = function(info) return (DB.energybar[info[#info-1] ][2]) end,
								set = function(info, offset) DB.energybar[info[#info-1] ][2] = (offset);JSHB.Options:LockDown(JSHB.SetupEnergyBarModule) end,
							},
							spacer6 = { order = 6, type = "description", name = "", desc = "", width = "half"},
							offsetX2 = {
								type = "range", 
								order = 8,
								name = L["Bottom-right X"],
								min = -50, softMin = 0, softMax = 10, max = 50, step = 1,
								disabled = function(info) return not DB.energybar["enablebackdrop"] end,
								get = function(info) return (DB.energybar[info[#info-1] ][3]) end,
								set = function(info, offset) DB.energybar[info[#info-1] ][3] = (offset);JSHB.Options:LockDown(JSHB.SetupEnergyBarModule) end,
							},
							offsetY2 = {
								type = "range", 
								order = 10,
								name = L["Bottom-right Y"],
								min = -50, softMin = -10, softMax = 0, max = 50, step = 1,
								disabled = function(info) return not DB.energybar["enablebackdrop"] end,
								get = function(info) return (DB.energybar[info[#info-1] ][4]) end,
								set = function(info, offset) DB.energybar[info[#info-1] ][4] = (offset);JSHB.Options:LockDown(JSHB.SetupEnergyBarModule) end,
							},										
						},
					},
					spacer = { order = 16, type = "description", name = "", desc = "", width = "full"},
				},
			},
			border = {
				type = "group",
				order = 24,
				name = L["Border"],
				disabled = function(info) return not DB.energybar["enabled"] end,
				args = {
					enableborder = {
						type = "toggle",
						order = 1,
						name = L["Enable"],
						get = function(info) return DB.energybar[info[#info] ] end,
						set = function(info, value) DB.energybar[info[#info] ] = value;JSHB.Options:LockDown(JSHB.SetupEnergyBarModule) end,
					},
					bordercolor = {
						type = "color",
						order = 2,
						name = L["Border color"],
						hasAlpha = true,
						disabled = function(info) return not DB.energybar["enableborder"] end,
						get = function(info) return unpack(DB.energybar[info[#info] ]) end,
						set = function(info, r, g, b, a) DB.energybar[info[#info] ] = {r, g, b, a};JSHB.Options:LockDown(JSHB.SetupEnergyBarModule) end,
					},
					bordertexture = {
						type = "select",
						dialogControl = 'LSM30_Border_JS',
						order = 3,
						name = L["Border texture"],
						values = AceGUIWidgetLSMlists.border,
						disabled = function(info) return not DB.energybar["enableborder"] end,
						get = function(info) return DB.energybar[info[#info] ] end,
						set = function(info, value) DB.energybar[info[#info] ] = value;JSHB.Options:LockDown(JSHB.SetupEnergyBarModule) end,
					},
					edgesize = {
						type = "range",
						order = 4,
						name = L["Edge size"],
						min = -100, softMin = -16, softMax = 16, max = 100, step = 1,
						disabled = function(info) return not DB.energybar["enableborder"] end,
						get = function(info) return DB.energybar[info[#info] ] end,
						set = function(info, value) DB.energybar[info[#info] ] = value;JSHB.Options:LockDown(JSHB.SetupEnergyBarModule) end,
					},
					spacer = { order = 7, type = "description", name = "", desc = "", width = "full"},
					backdropinsets = {
						type = "group",
						order = 10,
						name = L["Insets"],
						guiInline = true,
						args = {
							left = {
								type = "range",
								order = 1,
								name = L["Left"],
								min = -50, softMin = -16, softMax = 16, max = 50, step = 1,
								disabled = function(info) return not DB.energybar["enableborder"] end,
								get = function(info) return (DB.energybar[info[#info-1] ][1]) end,
								set = function(info, offset) DB.energybar[info[#info-1] ][1] = (offset);JSHB.Options:LockDown(JSHB.SetupEnergyBarModule) end,
							},
							right = {
								type = "range", 
								order = 2,
								name = L["Right"],
								min = -50, softMin = -16, softMax = 16, max = 50, step = 1,
								disabled = function(info) return not DB.energybar["enableborder"] end,
								get = function(info) return (DB.energybar[info[#info-1] ][2]) end,
								set = function(info, offset) DB.energybar[info[#info-1] ][2] = (offset);JSHB.Options:LockDown(JSHB.SetupEnergyBarModule) end,
							},
							top = {
								type = "range", 
								order = 3,
								name = L["Top"],
								min = -50, softMin = -16, softMax = 16, max = 50, step = 1,
								disabled = function(info) return not DB.energybar["enableborder"] end,
								get = function(info) return (DB.energybar[info[#info-1] ][3]) end,
								set = function(info, offset) DB.energybar[info[#info-1] ][3] = (offset);JSHB.Options:LockDown(JSHB.SetupEnergyBarModule) end,
							},
							bottom = {
								type = "range", 
								order = 4,
								name = L["Bottom"],
								min = -50, softMin = -16, softMax = 16, max = 50, step = 1,
								disabled = function(info) return not DB.energybar["enableborder"] end,
								get = function(info) return (DB.energybar[info[#info-1] ][4]) end,
								set = function(info, offset) DB.energybar[info[#info-1] ][4] = (offset);JSHB.Options:LockDown(JSHB.SetupEnergyBarModule) end,
							},										
						},
					},
				},
			},
		},
	}
end
